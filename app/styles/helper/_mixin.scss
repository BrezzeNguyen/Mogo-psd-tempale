// absoluteCenter
@mixin absoluteCenter($position:absolute, $direction : "left") {
    position: $position;

    @if $direction=="left" {
        left: 50%;
        transform: translateX(-50%);
    }

    @if $direction=="top" {
        top: 50%;
        transform: translateY(-50%);
    }

    @if $direction=="both" {
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
}

// absolutefull
@mixin absoluteFull() {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

// mixin maxwidth($breakpoint){@content}

@mixin maxWidth ($breakPoint) {
    @media only screen and (max-width: $breakPoint) {
        @content;
    }
}

// mixin minwidth ($breakpoint)

@mixin minWidth ($breakPoint) {
    @media only screen and (min-width:$breakPoint) {
        @content;
    }
}

@mixin flexBox($align-item: stretch,
    $justify-content: flex-start,
    $direction: row,
    $wrap: nowrap) {
    display: flex;
    align-items: $align-item;
    justify-content: $justify-content;
    flex-direction: $direction;
    flex-wrap: $wrap;
}

@mixin hideScroll() {
    -ms-overflow-style: none;
    scrollbar-width: none;

    &::-webkit-scrollbar {
        display: none;
    }
}

// Trả về số dòng mình muốn
@mixin textClamp($row: 1, $size: 100%) {
    display: -webkit-box;
    -webkit-line-clamp: $row;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    width: $size;
    max-width: $size;
    white-space: pre-wrap;
    word-break: break-all;
}

@mixin hoverEffect($itemClass, $contentClass, $transform: "true") {
    #{$itemClass} {
        position: relative;
        z-index: 1;
        will-change: $transform;
        transition: all .25s linear;
        #{$contentClass} {
            @include absoluteFull();
            background: linear-gradient(to bottom,
                    rgba($primary-color, 0.8),
                    rgba($secondary-color, 0.8));
            padding: 2rem;
            @include flexBox(center, center, column);
            z-index: 2;
            visibility: hidden;
            transition: all .25s linear;
            opacity: 0;
        }
        @if $transform =="true"{
            &::after {
                content: "";
                @include absoluteFull();
                background-color: $third-color;
                z-index: -1;
                transition: all .25s linear;
                will-change: $transform;
            }
        }


        &:hover {
            
            #{$contentClass} {
                opacity: 1;
                visibility: visible;
            }
            @if $transform == "true"{
                transform: translate(-1rem, -1rem);
                &::after {
                    transform: translate(1rem, 1rem);
                }
            }
        }
    }
}

@mixin touchSlider($width: 80%, $gap:2.5rem, $padding: 1rem){
    display: grid !important;
    justify-content: flex-start !important;
    grid-auto-columns: $width;
    grid-auto-flow: column;
    grid-template-columns: unset;
    grid-column-gap:$gap;
    overflow-x: scroll;
    @include hideScroll();
    padding: $padding;
    scroll-snap-type: x mandatory;
    scroll-snap-stop: always;
    @include hideScroll();
    & > *{
    scroll-snap-align: center;
    width: auto;
    }
}